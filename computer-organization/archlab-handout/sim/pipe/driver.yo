                      | #######################################################################
                      | # Test for copying block of size 90;
                      | #######################################################################
  0x000:              | 	.pos 0
  0x000: 30f4a0040000 | main:	irmovl Stack, %esp  	# Set up stack pointer
  0x006: 30f5a0040000 | 	irmovl Stack, %ebp  	# Set up base pointer
                      | 
                      | 	# Set up arguments for copy function and then invoke it
  0x00c: 30f05a000000 | 	irmovl $90, %eax		# src and dst have 90 elements
  0x012: a00f         | 	pushl %eax
  0x014: 30f0f4020000 | 	irmovl dest, %eax	# dst array
  0x01a: a00f         | 	pushl %eax
  0x01c: 30f080010000 | 	irmovl src, %eax	# src array
  0x022: a00f         | 	pushl %eax
  0x024: 802f000000   | 	call ncopy		 
  0x029: 808e000000   | 	call check	        # Call checker code
  0x02e: 00           | 	halt                    # should halt with 0xaaaa in %eax
  0x02f:              | StartFun:
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Include your name and ID here.
                      | #
                      | # Describe how and why you modified the baseline code.
                      | #
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x02f: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x031: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x033: a06f         | 	pushl %esi		# Save callee-save regs
  0x035: a03f         | 	pushl %ebx
  0x037: a07f         | 	pushl %edi
  0x039: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x03f: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x045: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | 	# Loop header
  0x04b: 6300         | 	xorl %eax,%eax		# count = 0;
  0x04d: 6222         | 	andl %edx,%edx		# len <= 0?
  0x04f: 7186000000   | 	jle Done		# if so, goto Done:
                      | 
  0x054: 506300000000 | Loop:	mrmovl (%ebx), %esi	# read val from src...
  0x05a: 406100000000 | 	rmmovl %esi, (%ecx)	# ...and store it to dst
  0x060: 6266         | 	andl %esi, %esi		# val <= 0?
  0x062: 716d000000   | 	jle Npos		# if so, goto Npos:
  0x067: c0f001000000 | 	iaddl  $1, %eax		# count++
  0x06d: c0f2ffffffff | Npos:	iaddl $-1, %edx		# len--
  0x073: c0f304000000 | 	iaddl  $4, %ebx		# src++
  0x079: c0f104000000 | 	iaddl  $4, %ecx		# dst++
  0x07f: 6222         | 	andl %edx,%edx		# len > 0?
  0x081: 7654000000   | 	jg Loop			# if so, goto Loop:
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x086:              | Done:
  0x086: b07f         | 	popl %edi               # Restore callee-save registers
  0x088: b03f         | 	popl %ebx
  0x08a: b06f         | 	popl %esi
                      | 	#rrmovl %ebp, %esp
                      | 	#popl %ebp		
  0x08c: d0           | 	leave			# replaces rrmovl and popl
  0x08d: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x08e:              | End:
                      | #/* $end ncopy-ys */
  0x08e:              | EndFun:
                      | #################################################################### 
                      | # Epilogue code for the correctness testing driver
                      | ####################################################################
                      | 
                      | # This is the correctness checking code.
                      | # It checks:
                      | #   1. %eax has 43.  Set %eax to 0xbbbb if not.
                      | #   2. The total length of the code is less than or equal to 1000.
                      | #      Set %eax to 0xcccc if not.
                      | #   3. The source data was copied to the destination.
                      | #      Set %eax to 0xdddd if not.
                      | #   4. The words just before and just after the destination region
                      | #      were not corrupted.  Set %eax to 0xeeee if not.
                      | # If all checks pass, then sets %eax to 0xaaaa
  0x08e:              | check:
  0x08e: a05f         | 	pushl %ebp
  0x090: 2045         | 	rrmovl %esp,%ebp
  0x092: a06f         | 	pushl %esi
  0x094: a03f         | 	pushl %ebx
  0x096: a07f         | 	pushl %edi
                      | 	# Return value test
  0x098: 30f22b000000 | 	irmovl $43,%edx
  0x09e: 6120         | 	subl %edx,%eax
  0x0a0: 73b0000000   | 	je checkb
  0x0a5: 30f0bbbb0000 | 	irmovl $0xbbbb,%eax  # Failed test #1
  0x0ab: 7072010000   | 	jmp cdone
  0x0b0:              | checkb:
                      | 	# Code length check
  0x0b0: 30f08e000000 | 	irmovl EndFun,%eax
  0x0b6: 30f22f000000 | 	irmovl StartFun,%edx
  0x0bc: 6120         | 	subl %edx,%eax
  0x0be: 30f2e8030000 | 	irmovl $1000,%edx
  0x0c4: 6102         | 	subl %eax,%edx
  0x0c6: 75d6000000   | 	jge checkm
  0x0cb: 30f0cccc0000 | 	irmovl $0xcccc,%eax  # Failed test #2
  0x0d1: 7072010000   | 	jmp cdone
  0x0d6:              | checkm:
  0x0d6: 30f2f4020000 | 	irmovl dest, %edx # Pointer to next destination location
  0x0dc: 30f380010000 | 	irmovl src,%ebx   # Pointer to next source location
  0x0e2: 30f75a000000 | 	irmovl $90,%edi  # Count
  0x0e8: 6277         | 	andl %edi,%edi
  0x0ea: 7324010000   | 	je checkpre         # Skip check if count = 0
  0x0ef:              | mcloop:
  0x0ef: 500200000000 | 	mrmovl (%edx),%eax
  0x0f5: 506300000000 | 	mrmovl (%ebx),%esi
  0x0fb: 6160         | 	subl %esi,%eax
  0x0fd: 730d010000   | 	je  mok
  0x102: 30f0dddd0000 | 	irmovl $0xdddd,%eax # Failed test #3
  0x108: 7072010000   | 	jmp cdone
  0x10d:              | mok:
  0x10d: 30f004000000 | 	irmovl $4,%eax
  0x113: 6002         | 	addl %eax,%edx	  # dest ++
  0x115: 6003         | 	addl %eax,%ebx    # src++
  0x117: 30f001000000 | 	irmovl $1,%eax
  0x11d: 6107         | 	subl %eax,%edi    # cnt--
  0x11f: 76ef000000   | 	jg mcloop
  0x124:              | checkpre:
                      | 	# Check for corruption
  0x124: 30f2f0020000 | 	irmovl Predest,%edx
  0x12a: 500200000000 | 	mrmovl (%edx), %eax  # Get word before destination
  0x130: 30f2fadebc00 | 	irmovl $0xbcdefa, %edx
  0x136: 6120         | 	subl %edx,%eax
  0x138: 7348010000   | 	je checkpost
  0x13d: 30f0eeee0000 | 	irmovl $0xeeee,%eax  # Failed test #4
  0x143: 7072010000   | 	jmp cdone
  0x148:              | checkpost:
                      | 	# Check for corruption
  0x148: 30f25c040000 | 	irmovl Postdest,%edx
  0x14e: 500200000000 | 	mrmovl (%edx), %eax  # Get word after destination
  0x154: 30f2bcfade00 | 	irmovl $0xdefabc, %edx
  0x15a: 6120         | 	subl %edx,%eax
  0x15c: 736c010000   | 	je checkok
  0x161: 30f0eeee0000 | 	irmovl $0xeeee,%eax # Failed test #4
  0x167: 7072010000   | 	jmp cdone
  0x16c:              | checkok:
                      | 	# Successful checks
  0x16c: 30f0aaaa0000 | 	irmovl $0xaaaa,%eax
  0x172:              | cdone:
  0x172: b07f         | 	popl %edi
  0x174: b03f         | 	popl %ebx
  0x176: b06f         | 	popl %esi
  0x178: 2054         | 	rrmovl %ebp, %esp
  0x17a: b05f         | 	popl %ebp
  0x17c: 90           | 	ret
                      | 
                      | ###############################
                      | # Source and destination blocks 
                      | ###############################
  0x180:              | 	.align 4
  0x180:              | src:
  0x180: ffffffff     | 	.long -1
  0x184: feffffff     | 	.long -2
  0x188: 03000000     | 	.long 3
  0x18c: fcffffff     | 	.long -4
  0x190: fbffffff     | 	.long -5
  0x194: faffffff     | 	.long -6
  0x198: 07000000     | 	.long 7
  0x19c: f8ffffff     | 	.long -8
  0x1a0: 09000000     | 	.long 9
  0x1a4: f6ffffff     | 	.long -10
  0x1a8: f5ffffff     | 	.long -11
  0x1ac: 0c000000     | 	.long 12
  0x1b0: f3ffffff     | 	.long -13
  0x1b4: f2ffffff     | 	.long -14
  0x1b8: 0f000000     | 	.long 15
  0x1bc: f0ffffff     | 	.long -16
  0x1c0: efffffff     | 	.long -17
  0x1c4: eeffffff     | 	.long -18
  0x1c8: edffffff     | 	.long -19
  0x1cc: ecffffff     | 	.long -20
  0x1d0: 15000000     | 	.long 21
  0x1d4: eaffffff     | 	.long -22
  0x1d8: 17000000     | 	.long 23
  0x1dc: e8ffffff     | 	.long -24
  0x1e0: e7ffffff     | 	.long -25
  0x1e4: 1a000000     | 	.long 26
  0x1e8: e5ffffff     | 	.long -27
  0x1ec: 1c000000     | 	.long 28
  0x1f0: 1d000000     | 	.long 29
  0x1f4: e2ffffff     | 	.long -30
  0x1f8: e1ffffff     | 	.long -31
  0x1fc: e0ffffff     | 	.long -32
  0x200: dfffffff     | 	.long -33
  0x204: deffffff     | 	.long -34
  0x208: 23000000     | 	.long 35
  0x20c: 24000000     | 	.long 36
  0x210: dbffffff     | 	.long -37
  0x214: daffffff     | 	.long -38
  0x218: 27000000     | 	.long 39
  0x21c: d8ffffff     | 	.long -40
  0x220: 29000000     | 	.long 41
  0x224: d6ffffff     | 	.long -42
  0x228: 2b000000     | 	.long 43
  0x22c: 2c000000     | 	.long 44
  0x230: 2d000000     | 	.long 45
  0x234: 2e000000     | 	.long 46
  0x238: d1ffffff     | 	.long -47
  0x23c: 30000000     | 	.long 48
  0x240: cfffffff     | 	.long -49
  0x244: 32000000     | 	.long 50
  0x248: 33000000     | 	.long 51
  0x24c: ccffffff     | 	.long -52
  0x250: 35000000     | 	.long 53
  0x254: 36000000     | 	.long 54
  0x258: 37000000     | 	.long 55
  0x25c: 38000000     | 	.long 56
  0x260: 39000000     | 	.long 57
  0x264: c6ffffff     | 	.long -58
  0x268: 3b000000     | 	.long 59
  0x26c: c4ffffff     | 	.long -60
  0x270: 3d000000     | 	.long 61
  0x274: 3e000000     | 	.long 62
  0x278: 3f000000     | 	.long 63
  0x27c: c0ffffff     | 	.long -64
  0x280: bfffffff     | 	.long -65
  0x284: beffffff     | 	.long -66
  0x288: 43000000     | 	.long 67
  0x28c: 44000000     | 	.long 68
  0x290: bbffffff     | 	.long -69
  0x294: baffffff     | 	.long -70
  0x298: b9ffffff     | 	.long -71
  0x29c: 48000000     | 	.long 72
  0x2a0: 49000000     | 	.long 73
  0x2a4: 4a000000     | 	.long 74
  0x2a8: b5ffffff     | 	.long -75
  0x2ac: b4ffffff     | 	.long -76
  0x2b0: 4d000000     | 	.long 77
  0x2b4: 4e000000     | 	.long 78
  0x2b8: b1ffffff     | 	.long -79
  0x2bc: b0ffffff     | 	.long -80
  0x2c0: 51000000     | 	.long 81
  0x2c4: aeffffff     | 	.long -82
  0x2c8: adffffff     | 	.long -83
  0x2cc: 54000000     | 	.long 84
  0x2d0: abffffff     | 	.long -85
  0x2d4: aaffffff     | 	.long -86
  0x2d8: 57000000     | 	.long 87
  0x2dc: 58000000     | 	.long 88
  0x2e0: 59000000     | 	.long 89
  0x2e4: 5a000000     | 	.long 90
  0x2e8: fadebc00     | 	.long 0xbcdefa # This shouldn't get moved
                      | 
  0x2f0:              | 	.align 16
  0x2f0:              | Predest:
  0x2f0: fadebc00     | 	.long 0xbcdefa
  0x2f4:              | dest:
  0x2f4: abefcd00     | 	.long 0xcdefab
  0x2f8: abefcd00     | 	.long 0xcdefab
  0x2fc: abefcd00     | 	.long 0xcdefab
  0x300: abefcd00     | 	.long 0xcdefab
  0x304: abefcd00     | 	.long 0xcdefab
  0x308: abefcd00     | 	.long 0xcdefab
  0x30c: abefcd00     | 	.long 0xcdefab
  0x310: abefcd00     | 	.long 0xcdefab
  0x314: abefcd00     | 	.long 0xcdefab
  0x318: abefcd00     | 	.long 0xcdefab
  0x31c: abefcd00     | 	.long 0xcdefab
  0x320: abefcd00     | 	.long 0xcdefab
  0x324: abefcd00     | 	.long 0xcdefab
  0x328: abefcd00     | 	.long 0xcdefab
  0x32c: abefcd00     | 	.long 0xcdefab
  0x330: abefcd00     | 	.long 0xcdefab
  0x334: abefcd00     | 	.long 0xcdefab
  0x338: abefcd00     | 	.long 0xcdefab
  0x33c: abefcd00     | 	.long 0xcdefab
  0x340: abefcd00     | 	.long 0xcdefab
  0x344: abefcd00     | 	.long 0xcdefab
  0x348: abefcd00     | 	.long 0xcdefab
  0x34c: abefcd00     | 	.long 0xcdefab
  0x350: abefcd00     | 	.long 0xcdefab
  0x354: abefcd00     | 	.long 0xcdefab
  0x358: abefcd00     | 	.long 0xcdefab
  0x35c: abefcd00     | 	.long 0xcdefab
  0x360: abefcd00     | 	.long 0xcdefab
  0x364: abefcd00     | 	.long 0xcdefab
  0x368: abefcd00     | 	.long 0xcdefab
  0x36c: abefcd00     | 	.long 0xcdefab
  0x370: abefcd00     | 	.long 0xcdefab
  0x374: abefcd00     | 	.long 0xcdefab
  0x378: abefcd00     | 	.long 0xcdefab
  0x37c: abefcd00     | 	.long 0xcdefab
  0x380: abefcd00     | 	.long 0xcdefab
  0x384: abefcd00     | 	.long 0xcdefab
  0x388: abefcd00     | 	.long 0xcdefab
  0x38c: abefcd00     | 	.long 0xcdefab
  0x390: abefcd00     | 	.long 0xcdefab
  0x394: abefcd00     | 	.long 0xcdefab
  0x398: abefcd00     | 	.long 0xcdefab
  0x39c: abefcd00     | 	.long 0xcdefab
  0x3a0: abefcd00     | 	.long 0xcdefab
  0x3a4: abefcd00     | 	.long 0xcdefab
  0x3a8: abefcd00     | 	.long 0xcdefab
  0x3ac: abefcd00     | 	.long 0xcdefab
  0x3b0: abefcd00     | 	.long 0xcdefab
  0x3b4: abefcd00     | 	.long 0xcdefab
  0x3b8: abefcd00     | 	.long 0xcdefab
  0x3bc: abefcd00     | 	.long 0xcdefab
  0x3c0: abefcd00     | 	.long 0xcdefab
  0x3c4: abefcd00     | 	.long 0xcdefab
  0x3c8: abefcd00     | 	.long 0xcdefab
  0x3cc: abefcd00     | 	.long 0xcdefab
  0x3d0: abefcd00     | 	.long 0xcdefab
  0x3d4: abefcd00     | 	.long 0xcdefab
  0x3d8: abefcd00     | 	.long 0xcdefab
  0x3dc: abefcd00     | 	.long 0xcdefab
  0x3e0: abefcd00     | 	.long 0xcdefab
  0x3e4: abefcd00     | 	.long 0xcdefab
  0x3e8: abefcd00     | 	.long 0xcdefab
  0x3ec: abefcd00     | 	.long 0xcdefab
  0x3f0: abefcd00     | 	.long 0xcdefab
  0x3f4: abefcd00     | 	.long 0xcdefab
  0x3f8: abefcd00     | 	.long 0xcdefab
  0x3fc: abefcd00     | 	.long 0xcdefab
  0x400: abefcd00     | 	.long 0xcdefab
  0x404: abefcd00     | 	.long 0xcdefab
  0x408: abefcd00     | 	.long 0xcdefab
  0x40c: abefcd00     | 	.long 0xcdefab
  0x410: abefcd00     | 	.long 0xcdefab
  0x414: abefcd00     | 	.long 0xcdefab
  0x418: abefcd00     | 	.long 0xcdefab
  0x41c: abefcd00     | 	.long 0xcdefab
  0x420: abefcd00     | 	.long 0xcdefab
  0x424: abefcd00     | 	.long 0xcdefab
  0x428: abefcd00     | 	.long 0xcdefab
  0x42c: abefcd00     | 	.long 0xcdefab
  0x430: abefcd00     | 	.long 0xcdefab
  0x434: abefcd00     | 	.long 0xcdefab
  0x438: abefcd00     | 	.long 0xcdefab
  0x43c: abefcd00     | 	.long 0xcdefab
  0x440: abefcd00     | 	.long 0xcdefab
  0x444: abefcd00     | 	.long 0xcdefab
  0x448: abefcd00     | 	.long 0xcdefab
  0x44c: abefcd00     | 	.long 0xcdefab
  0x450: abefcd00     | 	.long 0xcdefab
  0x454: abefcd00     | 	.long 0xcdefab
  0x458: abefcd00     | 	.long 0xcdefab
  0x45c:              | Postdest:
  0x45c: bcfade00     | 	.long 0xdefabc
                      | 
  0x460:              | .align 4
                      | # Run time stack
  0x460: 00000000     | 	.long 0
  0x464: 00000000     | 	.long 0
  0x468: 00000000     | 	.long 0
  0x46c: 00000000     | 	.long 0
  0x470: 00000000     | 	.long 0
  0x474: 00000000     | 	.long 0
  0x478: 00000000     | 	.long 0
  0x47c: 00000000     | 	.long 0
  0x480: 00000000     | 	.long 0
  0x484: 00000000     | 	.long 0
  0x488: 00000000     | 	.long 0
  0x48c: 00000000     | 	.long 0
  0x490: 00000000     | 	.long 0
  0x494: 00000000     | 	.long 0
  0x498: 00000000     | 	.long 0
  0x49c: 00000000     | 	.long 0
                      | 
  0x4a0:              | Stack:
