                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Victor A. Lora
                      | # ID: 00-2291432
                      | #
                      | # Ron Gerschel
                      | # ID: 00-2292229
                      | #
                      | # Describe how and why you modified the baseline code.
                      | #
                      | # 1A. Loop Unrolling: Unrolled the loop to a factor(k) of 4. 
                      | # At first we were seperating the mrmovl from src to the 
                      | # registers in each individual phase; however, this gave us 
                      | # a >10 benchmark. Later we tried moving the movl's from src 
                      | # to the registers in the same Pos# alternating between %edi 
                      | # and %esi to avoid stalling.
                      | #
                      | # 1B. Handling Odds: In order to handle the odds we subtracted
                      | # k from seven so len = len - k. Then if len < k, there would be
                      | # an immediate jump to Odd (which also be reached after Npos reached
                      | # (len-k<0)). Odd does (k+len), giving the len back its original 
                      | # length. Then it enters a similar "unrolled loop" as pos#; however,
                      | # this second loop checks to make sure that (len!=0) and as soon as it
                      | # reaches zero, it jmps to Done.
                      | #
                      | # 2. Leave: By implementing leave in the pipe-full.hcl, we were able
                      | # remove 2 instructions: (rrmovl %ebp, %esp) and (popl %ebp).
                      | #
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x000: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x002: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x004: a06f         | 	pushl %esi		# Save callee-save regs
  0x006: a03f         | 	pushl %ebx
  0x008: a07f         | 	pushl %edi
  0x00a: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x010: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x016: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | 	# Loop header
  0x01c: 6300         | 	xorl %eax,%eax		# count = 0;
  0x01e: 6222         | 	andl %edx,%edx		# len <= 0?
  0x020: 711d010000   | 	jle Done		# if so, goto Done:
  0x025: c0f2fcffffff | 	iaddl $-4, %edx		# len-=4 & len<0
  0x02b: 72ab000000   | 	jl Odd			# if so, goto Odd:
                      | 
  0x030:              | Pos1:	
  0x030: 506300000000 | 	mrmovl (%ebx), %esi	# read val[n] from src...
  0x036: 507304000000 | 	mrmovl 4(%ebx), %edi	# read val[n+1] from src...
  0x03c: 406100000000 | 	rmmovl %esi, (%ecx)	# store val[n] to dst[n]
  0x042: 6266         | 	andl %esi, %esi		# val[n]<=0?
  0x044: 714f000000   | 	jle Pos2		# if so, goto Pos2:
  0x049: c0f001000000 | 	iaddl  $1, %eax		# count++
                      | 
  0x04f:              | Pos2:
  0x04f: 407104000000 | 	rmmovl %edi, 4(%ecx)	# store val[n+1] to dst[n+1]
  0x055: 6277         | 	andl %edi, %edi		# val[n+1]<=0?
  0x057: 7162000000   | 	jle Pos3		# if so, goto Pos3:
  0x05c: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x062:              | Pos3:	
  0x062: 506308000000 | 	mrmovl 8(%ebx), %esi	# read val[n+2] from src...
  0x068: 50730c000000 | 	mrmovl 12(%ebx), %edi	# read val[n+3] from src...
  0x06e: 406108000000 | 	rmmovl %esi, 8(%ecx)	# store v[n+2] to dst[n+2]
  0x074: 6266         | 	andl %esi, %esi		# val[n+2]<=0?
  0x076: 7181000000   | 	jle Pos4		# if so, goto Pos4:
  0x07b: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x081:              | Pos4:
  0x081: 40710c000000 |         rmmovl %edi, 12(%ecx)	# store val[n+4] to dst[n+4]
  0x087: 6277         |         andl %edi, %edi		# val[n+4]<=0?
  0x089: 7194000000   |         jle Npos		# if so, goto Npos:
  0x08e: c0f001000000 |         iaddl $1, %eax		# count++
                      | 
  0x094:              | Npos:
  0x094: c0f310000000 | 	iaddl  $16,%ebx		# src++
  0x09a: c0f110000000 | 	iaddl  $16, %ecx	# dst++
                      | 	# by moving len-- we eliminated an instr.
  0x0a0: c0f2fcffffff | 	iaddl $-4, %edx		# len-- & len>=4?
  0x0a6: 7530000000   | 	jge Pos1		# if so, goto Loop:
                      | 	
  0x0ab: c0f204000000 | Odd:	iaddl $4, %edx		# len+=4
                      | 	
  0x0b1:              | Odd_1:
  0x0b1: c0f2ffffffff | 	iaddl $-1, %edx		# len-=1
  0x0b7: 721d010000   | 	jl Done			# len<0
  0x0bc: 506300000000 | 	mrmovl (%ebx), %esi	# read val[n] from src...
  0x0c2: 507304000000 | 	mrmovl 4(%ebx), %edi	# read val[n+1] from src...
  0x0c8: 406100000000 | 	rmmovl %esi, (%ecx)	# store v[n] to dst[n]
  0x0ce: 6266         | 	andl %esi, %esi		# val[n]<=0?
  0x0d0: 71db000000   | 	jle Odd_2		# if so, goto Odd_2:
  0x0d5: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 	
  0x0db:              | Odd_2:
  0x0db: c0f2ffffffff | 	iaddl $-1, %edx		# len-=1
  0x0e1: 721d010000   | 	jl Done			# len<0
  0x0e6: 407104000000 | 	rmmovl %edi, 4(%ecx)	# store v[n+1] to dst[n+1]
  0x0ec: 6277         | 	andl %edi, %edi		# val[n+1]<=0?
  0x0ee: 71f9000000   | 	jle Odd_3		# if so, goto Odd_3:
  0x0f3: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x0f9:              | Odd_3:	
  0x0f9: c0f2ffffffff | 	iaddl $-1, %edx		# len-=1
  0x0ff: 721d010000   | 	jl Done			# len<0
  0x104: 506308000000 | 	mrmovl 8(%ebx), %esi	# read val[n+2] from src...
  0x10a: 406108000000 | 	rmmovl %esi, 8(%ecx)	# store v[n+2] from src...
  0x110: 6266         | 	andl %esi, %esi		# val[n+2]<=0?
  0x112: 711d010000   | 	jle Done		# if so, goto Done
  0x117: c0f001000000 | 	iaddl $1, %eax		# count ++
                      | 
                      | 
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x11d:              | Done:
  0x11d: b07f         | 	popl %edi               # Restore callee-save registers
  0x11f: b03f         | 	popl %ebx
  0x121: b06f         | 	popl %esi
  0x123: d0           | 	leave			# replaces rrmovl and popl
  0x124: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x125:              | End:
                      | #/* $end ncopy-ys */
