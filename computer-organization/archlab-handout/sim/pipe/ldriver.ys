#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovl Stack, %esp  	# Set up stack pointer
	irmovl Stack, %ebp  	# Set up base pointer

	# Set up arguments for copy function and then invoke it
	irmovl $63, %eax		# src and dst have 63 elements
	pushl %eax
	irmovl dest, %eax	# dst array
	pushl %eax
	irmovl src, %eax	# src array
	pushl %eax
	call ncopy		 
	halt			# should halt with num nonzeros in %eax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Victor A. Lora
# ID: 00-2291432
#
# Ron Gerschel
# ID: 00-2292229
#
# Describe how and why you modified the baseline code.
#
# 1A. Loop Unrolling: Unrolled the loop to a factor(k) of 4. 
# At first we were seperating the mrmovl from src to the 
# registers in each individual phase; however, this gave us 
# a >10 benchmark. Later we tried moving the movl's from src 
# to the registers in the same Pos# alternating between %edi 
# and %esi to avoid stalling.
# 
# Note: In Npos we also moved len-- to replace andl edx,edx,
# which eliminated the andl instruction since the CC would
# be set by iaddl
#
# 1B. Handling Odds: In order to handle the odds we subtracted
# k from seven so len = len - k. Then if len < k, there would be
# an immediate jump to Odd (which also be reached after Npos reached
# (len-k<0)). Odd does (k+len), giving the len back its original 
# length. Then it enters a similar "unrolled loop" as pos#; however,
# this second loop checks to make sure that (len!=0) and as soon as it
# reaches zero, it jmps to Done.
#
# 2. Leave: By implementing leave in the pipe-full.hcl, we were able
# remove 2 instructions: (rrmovl %ebp, %esp) and (popl %ebp).
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax,%eax		# count = 0;
	andl %edx,%edx		# len <= 0?
	jle Done		# if so, goto Done:
	iaddl $-4, %edx		# len-=4 & len<0
	jl Odd			# if so, goto Odd:

Pos1:	
	mrmovl (%ebx), %esi	# read val[n] from src...
	mrmovl 4(%ebx), %edi	# read val[n+1] from src...
	rmmovl %esi, (%ecx)	# store val[n] to dst[n]
	andl %esi, %esi		# val[n]<=0?
	jle Pos2		# if so, goto Pos2:
	iaddl  $1, %eax		# count++

Pos2:
	rmmovl %edi, 4(%ecx)	# store val[n+1] to dst[n+1]
	andl %edi, %edi		# val[n+1]<=0?
	jle Pos3		# if so, goto Pos3:
	iaddl $1, %eax		# count++

Pos3:	
	mrmovl 8(%ebx), %esi	# read val[n+2] from src...
	mrmovl 12(%ebx), %edi	# read val[n+3] from src...
	rmmovl %esi, 8(%ecx)	# store v[n+2] to dst[n+2]
	andl %esi, %esi		# val[n+2]<=0?
	jle Pos4		# if so, goto Pos4:
	iaddl $1, %eax		# count++

Pos4:
        rmmovl %edi, 12(%ecx)	# store val[n+4] to dst[n+4]
        andl %edi, %edi		# val[n+4]<=0?
        jle Npos		# if so, goto Npos:
        iaddl $1, %eax		# count++

Npos:
	iaddl  $16,%ebx		# src++
	iaddl  $16, %ecx	# dst++
	# by moving len-- we eliminated an instr.
	iaddl $-4, %edx		# len-- & len>=4?
	jge Pos1		# if so, goto Loop:
	
Odd:	iaddl $4, %edx		# len+=4
	
Odd_1:
	iaddl $-1, %edx		# len-=1
	jl Done			# len<0
	mrmovl (%ebx), %esi	# read val[n] from src...
	mrmovl 4(%ebx), %edi	# read val[n+1] from src...
	rmmovl %esi, (%ecx)	# store v[n] to dst[n]
	andl %esi, %esi		# val[n]<=0?
	jle Odd_2		# if so, goto Odd_2:
	iaddl $1, %eax		# count++
	
Odd_2:
	iaddl $-1, %edx		# len-=1
	jl Done			# len<0
	rmmovl %edi, 4(%ecx)	# store v[n+1] to dst[n+1]
	andl %edi, %edi		# val[n+1]<=0?
	jle Odd_3		# if so, goto Odd_3:
	iaddl $1, %eax		# count++

Odd_3:	
	iaddl $-1, %edx		# len-=1
	jl Done			# len<0
	mrmovl 8(%ebx), %esi	# read val[n+2] from src...
	rmmovl %esi, 8(%ecx)	# store v[n+2] from src...
	andl %esi, %esi		# val[n+2]<=0?
	jle Done		# if so, goto Done
	iaddl $1, %eax		# count ++


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	leave			# replaces rrmovl and popl
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 4
src:
	.long 1
	.long -2
	.long 3
	.long 4
	.long -5
	.long -6
	.long 7
	.long 8
	.long -9
	.long -10
	.long 11
	.long -12
	.long -13
	.long 14
	.long -15
	.long -16
	.long -17
	.long 18
	.long -19
	.long -20
	.long -21
	.long -22
	.long 23
	.long 24
	.long 25
	.long 26
	.long -27
	.long 28
	.long -29
	.long -30
	.long 31
	.long -32
	.long 33
	.long -34
	.long -35
	.long -36
	.long 37
	.long -38
	.long -39
	.long -40
	.long -41
	.long -42
	.long 43
	.long -44
	.long 45
	.long -46
	.long 47
	.long -48
	.long 49
	.long -50
	.long 51
	.long 52
	.long -53
	.long 54
	.long 55
	.long -56
	.long 57
	.long 58
	.long 59
	.long 60
	.long 61
	.long 62
	.long 63
	.long 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.long 0xbcdefa
dest:
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
Postdest:
	.long 0xdefabc

.align 4
# Run time stack
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0

Stack:
