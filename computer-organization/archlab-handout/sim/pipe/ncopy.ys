#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Victor A. Lora
# ID: 00-2291432
#
# Ron Gerschel
# ID: 00-2292229
#
# Describe how and why you modified the baseline code.
#
# 1A. Loop Unrolling: Unrolled the loop to a factor(k) of 4. 
# At first we were seperating the mrmovl from src to the 
# registers in each individual phase; however, this gave us 
# a >10 benchmark. Later we tried moving the movl's from src 
# to the registers in the same Pos# alternating between %edi 
# and %esi to avoid stalling.
# 
# Note: In Npos we also moved len-- to replace andl edx,edx,
# which eliminated the andl instruction since the CC would
# be set by iaddl
#
# 1B. Handling Odds: In order to handle the odds we subtracted
# k from seven so len = len - k. Then if len < k, there would be
# an immediate jump to Odd (which also be reached after Npos reached
# (len-k<0)). Odd does (k+len), giving the len back its original 
# length. Then it enters a similar "unrolled loop" as pos#; however,
# this second loop checks to make sure that (len!=0) and as soon as it
# reaches zero, it jmps to Done.
#
# 2. Leave: By implementing leave in the pipe-full.hcl, we were able
# remove 2 instructions: (rrmovl %ebp, %esp) and (popl %ebp).
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax,%eax		# count = 0;
	andl %edx,%edx		# len <= 0?
	jle Done		# if so, goto Done:
	iaddl $-4, %edx		# len-=4 & len<0
	jl Odd			# if so, goto Odd:

Pos1:	
	mrmovl (%ebx), %esi	# read val[n] from src...
	mrmovl 4(%ebx), %edi	# read val[n+1] from src...
	rmmovl %esi, (%ecx)	# store val[n] to dst[n]
	andl %esi, %esi		# val[n]<=0?
	jle Pos2		# if so, goto Pos2:
	iaddl  $1, %eax		# count++

Pos2:
	rmmovl %edi, 4(%ecx)	# store val[n+1] to dst[n+1]
	andl %edi, %edi		# val[n+1]<=0?
	jle Pos3		# if so, goto Pos3:
	iaddl $1, %eax		# count++

Pos3:	
	mrmovl 8(%ebx), %esi	# read val[n+2] from src...
	mrmovl 12(%ebx), %edi	# read val[n+3] from src...
	rmmovl %esi, 8(%ecx)	# store v[n+2] to dst[n+2]
	andl %esi, %esi		# val[n+2]<=0?
	jle Pos4		# if so, goto Pos4:
	iaddl $1, %eax		# count++

Pos4:
        rmmovl %edi, 12(%ecx)	# store val[n+4] to dst[n+4]
        andl %edi, %edi		# val[n+4]<=0?
        jle Npos		# if so, goto Npos:
        iaddl $1, %eax		# count++

Npos:
	iaddl  $16,%ebx		# src++
	iaddl  $16, %ecx	# dst++
	# by moving len-- we eliminated an instr.
	iaddl $-4, %edx		# len-- & len>=4?
	jge Pos1		# if so, goto Loop:
	
Odd:	iaddl $4, %edx		# len+=4
	
Odd_1:
	iaddl $-1, %edx		# len-=1
	jl Done			# len<0
	mrmovl (%ebx), %esi	# read val[n] from src...
	mrmovl 4(%ebx), %edi	# read val[n+1] from src...
	rmmovl %esi, (%ecx)	# store v[n] to dst[n]
	andl %esi, %esi		# val[n]<=0?
	jle Odd_2		# if so, goto Odd_2:
	iaddl $1, %eax		# count++
	
Odd_2:
	iaddl $-1, %edx		# len-=1
	jl Done			# len<0
	rmmovl %edi, 4(%ecx)	# store v[n+1] to dst[n+1]
	andl %edi, %edi		# val[n+1]<=0?
	jle Odd_3		# if so, goto Odd_3:
	iaddl $1, %eax		# count++

Odd_3:	
	iaddl $-1, %edx		# len-=1
	jl Done			# len<0
	mrmovl 8(%ebx), %esi	# read val[n+2] from src...
	rmmovl %esi, 8(%ecx)	# store v[n+2] from src...
	andl %esi, %esi		# val[n+2]<=0?
	jle Done		# if so, goto Done
	iaddl $1, %eax		# count ++


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	leave			# replaces rrmovl and popl
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
