                      | #######################################################################
                      | # Test for copying block of size 4;
                      | #######################################################################
  0x000:              | 	.pos 0
  0x000: 30f4c8010000 | main:	irmovl Stack, %esp  	# Set up stack pointer
  0x006: 30f5c8010000 | 	irmovl Stack, %ebp  	# Set up base pointer
                      | 
                      | 	# Set up arguments for copy function and then invoke it
  0x00c: 30f004000000 | 	irmovl $4, %eax		# src and dst have 4 elements
  0x012: a00f         | 	pushl %eax
  0x014: 30f074010000 | 	irmovl dest, %eax	# dst array
  0x01a: a00f         | 	pushl %eax
  0x01c: 30f050010000 | 	irmovl src, %eax	# src array
  0x022: a00f         | 	pushl %eax
  0x024: 802a000000   | 	call ncopy		 
  0x029: 00           | 	halt			# should halt with num nonzeros in %eax
  0x02a:              | StartFun:
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Victor A. Lora
                      | # ID: 00-2291432
                      | #
                      | # Ron Gerschel
                      | # ID: 00-2292229
                      | #
                      | # Describe how and why you modified the baseline code.
                      | #
                      | # 1A. Loop Unrolling: Unrolled the loop to a factor(k) of 4. 
                      | # At first we were seperating the mrmovl from src to the 
                      | # registers in each individual phase; however, this gave us 
                      | # a >10 benchmark. Later we tried moving the movl's from src 
                      | # to the registers in the same Pos# alternating between %edi 
                      | # and %esi to avoid stalling.
                      | # 
                      | # Note: In Npos we also moved len-- to replace andl edx,edx,
                      | # which eliminated the andl instruction since the CC would
                      | # be set by iaddl
                      | #
                      | # 1B. Handling Odds: In order to handle the odds we subtracted
                      | # k from seven so len = len - k. Then if len < k, there would be
                      | # an immediate jump to Odd (which also be reached after Npos reached
                      | # (len-k<0)). Odd does (k+len), giving the len back its original 
                      | # length. Then it enters a similar "unrolled loop" as pos#; however,
                      | # this second loop checks to make sure that (len!=0) and as soon as it
                      | # reaches zero, it jmps to Done.
                      | #
                      | # 2. Leave: By implementing leave in the pipe-full.hcl, we were able
                      | # remove 2 instructions: (rrmovl %ebp, %esp) and (popl %ebp).
                      | #
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x02a: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x02c: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x02e: a06f         | 	pushl %esi		# Save callee-save regs
  0x030: a03f         | 	pushl %ebx
  0x032: a07f         | 	pushl %edi
  0x034: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x03a: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x040: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | 	# Loop header
  0x046: 6300         | 	xorl %eax,%eax		# count = 0;
  0x048: 6222         | 	andl %edx,%edx		# len <= 0?
  0x04a: 7147010000   | 	jle Done		# if so, goto Done:
  0x04f: c0f2fcffffff | 	iaddl $-4, %edx		# len-=4 & len<0
  0x055: 72d5000000   | 	jl Odd			# if so, goto Odd:
                      | 
  0x05a:              | Pos1:	
  0x05a: 506300000000 | 	mrmovl (%ebx), %esi	# read val[n] from src...
  0x060: 507304000000 | 	mrmovl 4(%ebx), %edi	# read val[n+1] from src...
  0x066: 406100000000 | 	rmmovl %esi, (%ecx)	# store val[n] to dst[n]
  0x06c: 6266         | 	andl %esi, %esi		# val[n]<=0?
  0x06e: 7179000000   | 	jle Pos2		# if so, goto Pos2:
  0x073: c0f001000000 | 	iaddl  $1, %eax		# count++
                      | 
  0x079:              | Pos2:
  0x079: 407104000000 | 	rmmovl %edi, 4(%ecx)	# store val[n+1] to dst[n+1]
  0x07f: 6277         | 	andl %edi, %edi		# val[n+1]<=0?
  0x081: 718c000000   | 	jle Pos3		# if so, goto Pos3:
  0x086: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x08c:              | Pos3:	
  0x08c: 506308000000 | 	mrmovl 8(%ebx), %esi	# read val[n+2] from src...
  0x092: 50730c000000 | 	mrmovl 12(%ebx), %edi	# read val[n+3] from src...
  0x098: 406108000000 | 	rmmovl %esi, 8(%ecx)	# store v[n+2] to dst[n+2]
  0x09e: 6266         | 	andl %esi, %esi		# val[n+2]<=0?
  0x0a0: 71ab000000   | 	jle Pos4		# if so, goto Pos4:
  0x0a5: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x0ab:              | Pos4:
  0x0ab: 40710c000000 |         rmmovl %edi, 12(%ecx)	# store val[n+4] to dst[n+4]
  0x0b1: 6277         |         andl %edi, %edi		# val[n+4]<=0?
  0x0b3: 71be000000   |         jle Npos		# if so, goto Npos:
  0x0b8: c0f001000000 |         iaddl $1, %eax		# count++
                      | 
  0x0be:              | Npos:
  0x0be: c0f310000000 | 	iaddl  $16,%ebx		# src++
  0x0c4: c0f110000000 | 	iaddl  $16, %ecx	# dst++
                      | 	# by moving len-- we eliminated an instr.
  0x0ca: c0f2fcffffff | 	iaddl $-4, %edx		# len-- & len>=4?
  0x0d0: 755a000000   | 	jge Pos1		# if so, goto Loop:
                      | 	
  0x0d5: c0f204000000 | Odd:	iaddl $4, %edx		# len+=4
                      | 	
  0x0db:              | Odd_1:
  0x0db: c0f2ffffffff | 	iaddl $-1, %edx		# len-=1
  0x0e1: 7247010000   | 	jl Done			# len<0
  0x0e6: 506300000000 | 	mrmovl (%ebx), %esi	# read val[n] from src...
  0x0ec: 507304000000 | 	mrmovl 4(%ebx), %edi	# read val[n+1] from src...
  0x0f2: 406100000000 | 	rmmovl %esi, (%ecx)	# store v[n] to dst[n]
  0x0f8: 6266         | 	andl %esi, %esi		# val[n]<=0?
  0x0fa: 7105010000   | 	jle Odd_2		# if so, goto Odd_2:
  0x0ff: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 	
  0x105:              | Odd_2:
  0x105: c0f2ffffffff | 	iaddl $-1, %edx		# len-=1
  0x10b: 7247010000   | 	jl Done			# len<0
  0x110: 407104000000 | 	rmmovl %edi, 4(%ecx)	# store v[n+1] to dst[n+1]
  0x116: 6277         | 	andl %edi, %edi		# val[n+1]<=0?
  0x118: 7123010000   | 	jle Odd_3		# if so, goto Odd_3:
  0x11d: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x123:              | Odd_3:	
  0x123: c0f2ffffffff | 	iaddl $-1, %edx		# len-=1
  0x129: 7247010000   | 	jl Done			# len<0
  0x12e: 506308000000 | 	mrmovl 8(%ebx), %esi	# read val[n+2] from src...
  0x134: 406108000000 | 	rmmovl %esi, 8(%ecx)	# store v[n+2] from src...
  0x13a: 6266         | 	andl %esi, %esi		# val[n+2]<=0?
  0x13c: 7147010000   | 	jle Done		# if so, goto Done
  0x141: c0f001000000 | 	iaddl $1, %eax		# count ++
                      | 
                      | 
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x147:              | Done:
  0x147: b07f         | 	popl %edi               # Restore callee-save registers
  0x149: b03f         | 	popl %ebx
  0x14b: b06f         | 	popl %esi
  0x14d: d0           | 	leave			# replaces rrmovl and popl
  0x14e: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x14f:              | End:
                      | #/* $end ncopy-ys */
  0x14f:              | EndFun:
                      | 
                      | ###############################
                      | # Source and destination blocks 
                      | ###############################
  0x150:              | 	.align 4
  0x150:              | src:
  0x150: ffffffff     | 	.long -1
  0x154: feffffff     | 	.long -2
  0x158: 03000000     | 	.long 3
  0x15c: 04000000     | 	.long 4
  0x160: fadebc00     | 	.long 0xbcdefa # This shouldn't get moved
                      | 
  0x170:              | 	.align 16
  0x170:              | Predest:
  0x170: fadebc00     | 	.long 0xbcdefa
  0x174:              | dest:
  0x174: abefcd00     | 	.long 0xcdefab
  0x178: abefcd00     | 	.long 0xcdefab
  0x17c: abefcd00     | 	.long 0xcdefab
  0x180: abefcd00     | 	.long 0xcdefab
  0x184:              | Postdest:
  0x184: bcfade00     | 	.long 0xdefabc
                      | 
  0x188:              | .align 4
                      | # Run time stack
  0x188: 00000000     | 	.long 0
  0x18c: 00000000     | 	.long 0
  0x190: 00000000     | 	.long 0
  0x194: 00000000     | 	.long 0
  0x198: 00000000     | 	.long 0
  0x19c: 00000000     | 	.long 0
  0x1a0: 00000000     | 	.long 0
  0x1a4: 00000000     | 	.long 0
  0x1a8: 00000000     | 	.long 0
  0x1ac: 00000000     | 	.long 0
  0x1b0: 00000000     | 	.long 0
  0x1b4: 00000000     | 	.long 0
  0x1b8: 00000000     | 	.long 0
  0x1bc: 00000000     | 	.long 0
  0x1c0: 00000000     | 	.long 0
  0x1c4: 00000000     | 	.long 0
                      | 
  0x1c8:              | Stack:
