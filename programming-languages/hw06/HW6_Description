HW06 - arith scan, parse, eval

Please submit a text file (or a zip file containing text files) that contains the procedures described below. Your submission should be documented as described in the Scheme coding standard; insufficiently documented submissions will be returned ungraded. Be sure to include sample code to demonstrate that each procedure works correctly.

Before you start coding, consider:

Which grammar element definitions involve only scanner tokens? recursive grammar definitions?
For which grammar elements will testing be easiest? most difficult?
Which grammar elements should be implemented sooner? later?
arith_scanparse.scm

Write a lexical specification and a grammar in SLLGEN to scan and parse strings for the following grammar:

<arith-expr>   ::== <arith-term>   {  <add-op> <arith-term>   }*
<arith-term>   ::== <arith-factor> { <mult-op> <arith-factor> }*
<arith-factor> ::== <number>
<arith-factor> ::== ( <arith-expr> )
<add-op>       ::== + | -
<mult-op>      ::== * | /
The resulting scanner should handle precedence correctly, so that 3+2*66-5 should be parsed as 3 + ( 2 * 66 ) - 5.

arith_eval.scm

Write an interpreter that takes the syntax tree produced by the parser and evaluates it as an arithmetic expression. Make sure that precedence and associativity are handled correctly!